#+title: ft_printf tests description
* PROTOTYPE
#+begin_src c
int ft_printf(const char *, ...);
#+end_src

* MANDATORY PART
** %c
#+begin_quote
The =int= argument is converted to an =unsigned char= and the resulting character is written.
#+end_quote
1. Normal printable char ([32-126]) + w/ spaces
2. Multiple Normal printable chars ([32-126]) + w/ spaces
3. Non-printable chars ([0-31/127])
4. Negative char
5. High unsigned char > 127
6. High int > 255
7. All tests in one call
8. All tests w/out spaces

** %s
#+begin_quote
The =const char *= argument is excpected to be a pointer to an array of character type (pointer to a string). Characters from the array are written up to (*but not including*) a terminating null byte ('\0').
#+end_quote
1. Normal string
2. Normal string with spaces in non-formated string
3. Empty string
4. Big string
5. All tests in one call
6. All tests w/out spaces

** %p
#+begin_quote
The =void *= pointer argument is printed in hexadecimal.
#+end_quote
1. Normal pointer
2. Normal pointer with spaces in non-formated string
3. Normal number
4. Negative number
5. ULONG_MAX
6. ULONG_MIN
7. All tests in one call
8. All tests w/out spaces

** %d
#+begin_quote
The =int= argument is converted to a decimal notation.
#+end_quote
1. Normal positive number + w/ spaces
2. Normal negative number + w/ spaces
3. INT_MAX
4. INT_MIN
5. UINT_MAX
6. Hexa number
7. Bin number
8. Octal number
9. All tests in one
10. All tests w/out spaces

** %i
#+begin_quote
The =int= argument is converted to a decimal notation.
#+end_quote
1. Normal positive number + w/ spaces
2. Normal negative number + w/ spaces
3. INT_MAX
4. INT_MIN
5. UINT_MAX
6. Hexa number
7. Bin number
8. Octal number
9. All tests in one
10. All tests w/out spaces

** %u
#+begin_quote
The =unsigned int= argument is converted to unsigned decimal.
#+end_quote
1. Normal number + w/ spaces
2. Negative number
3. UINT_MAX
4. Hexa number
5. Bin number
6. Octal number
7. All tests in one
8. All tests w/out spaces

** %x
#+begin_quote
The =unsigned int= argument is converted to unsigned hexadecimal. The letters *abcdef* are used for *x* conversion.
#+end_quote
1. Normal number + w/ spaces
2. Negative number
3. UINT_MAX
4. Hexa number
5. Bin number
6. Octal number
7. All tests in one
8. All tests w/out spaces

** %X
#+begin_quote
The =unsigned int= argument is converted to unsigned hexadecimal. The letters *ABCDEF* are used for *X* conversion.
#+end_quote
1. Normal number + w/ spaces
2. Negative number
3. UINT_MAX
4. Hexa number
5. Bin number
6. Octal number
7. All tests in one
8. All tests w/out spaces

** %%
#+begin_quote
A '%' is written. No argument is converted.
#+end_quote
1. Normal test + w/ spaces
2. Multiple use of flag w/out spaces

** Miscellaneous
1. ft_printf(0)
2. BIG nb of conversions

* BONUS PART
** -
#+begin_quote
The converted value is to be left adjusted on the field boundary. The converted value is padded on the right with blanks. *A - overrides a 0 if both are given*.
#+end_quote
*** %c
1. minus alone
2. minus 1
3. minus 5
4. minus followed by zero
5. minus INT_MAX
6. minus INT_MAX+1
*** %s
1. minus n=len(str)
2. minus n<len(str)
3. minus n>len(str)
4. minus then zero
*** %p
1. minus n=len(res)
2. minus n<len(res)
3. minus n>len(res)
4. minus then zero
*** %d
1. minus n=len(res)
2. minus n<len(res)
3. minus n>len(res)
4. minus then zero
*** %i
1. minus n=len(res)
2. minus n<len(res)
3. minus n>len(res)
4. minus then zero
*** %u
1. minus n=len(res)
2. minus n<len(res)
3. minus n>len(res)
4. minus then zero
*** %x
1. minus n=len(res)
2. minus n<len(res)
3. minus n>len(res)
4. minus then zero
*** %X
1. minus n=len(nb)
2. minus n<len(nb)
3. minus n>len(nb)
4. minus then zero

** 0
#+begin_quote
The value should be zero padded. The converted value is padded on the left with zeros rather than blanks. *If the 0 and - flags both appear, the 0 is ignored.* If a precision given with d, i, o, u, x or X, 0 flag ignored. For other conversion, undefined behavior.
#+end_quote
*** %c
1. %0c
2. %01c
3. %05c
4. %05-3c
*** %s
1. %0s
2. %01s
3. n > len(s)
4. %05-3s
*** %p
1. %0p
2. %01p
3. %012p
4. %012-11p
*** %d
1. %0d
2. %01d
3. n > len(d)
4. %0n-nd
*** %i
1. %0i
2. %01i
3. n > len(i)
4. %0n-ni
*** %u
1. %0u
2. %01u
3. n > len(u)
4. %0n-nu
*** %x
1. %0x
2. %01x
3. n > len(x)
4. %0n-nx
*** %X
1. %0X
2. %01X
3. n > len(X)
4. %0n-nX

** . (precision)
#+begin_quote
[...] followed by an optional decimal digit string. "*" to specify that precision is given in next argument, "*x$" for x-th argument. If only '.', precision = 0. Precision < 0 = precision ommited. *Minimum number of digits for d, i, o, u, x, X and maximum number of chars for s*.
#+end_quote
*** %s
1. %.s
2. %.ns n < len(s)
3. %.ns n > len(s)
4. %.*s arg < len(s)
5. %.*2$s arg < len(s)
6. %.ns n = int_max
7. %.ns n = int_max+1
*** %d
1. %.d
2. %.nd n < len(d)
3. %.nd n > len(d)
4. %.*d arg > len(d)
5. %.*2$d arg > len(d)
*** %i
1. %.i
2. %.ni n < len(i)
3. %.ni n > len(i)
4. %.*i arg > len(i)
5. %.*2$i arg > len(i)
*** %u
1. %.u
2. %.nu n < len(u)
3. %.nu n > len(u)
4. %.*u arg > len(u)
5. %.*2$u arg > len(u)
*** %x
1. %.x
2. %.nx n < len(x)
3. %.nx n > len(x)
4. %.*x arg > len(x)
5. %.*2$x arg > len(x)
*** %X
1. %.X
2. %.nX n < len(X)
3. %.nX n > len(X)
4. %.*X arg > len(X)
5. %.*2$X arg > len(X)

** Field width
#+begin_quote
An optional digit string specifying min field width. If converted value has fewer characters than field width => padded with spaces on the left (right if -).
#+end_quote
*** %c
1. %1c
2. %5c
3. %nc n = int_max
4. %nc n = int_max+1
*** %s
1. %1s
2. %ns n = len(s)
3. %ns n > len(s)
*** %p
1. %1p
2. %np n = len(p)
3. %np n > len(p)
*** %d
1. %nd n < len(d)
2. %nd n = len(d)
3. %nd n > len(d)
*** %i
1. %ni n < len(i)
2. %ni n = len(i)
3. %ni n > len(i)
*** %u
1. %nu n < len(u)
2. %nu n = len(u)
3. %nu n > len(u)
*** %x
1. %nx n < len(x)
2. %nx n = len(x)
3. %nx n > len(x)
*** %X
1. %nX n < len(X)
2. %nX n = len(X)
3. %nX n > len(X)

** #
#+begin_quote
Value converted to an "alternate form". For x and X a nonzero result has 0x or 0X prepended to it.
#+end_quote
*** %x
1. %#x
2. %#nx n > len(x)
3. %#-nx n > len(x)
4. %#.nx n > len(x)
5. %#0nx n > len(x)
*** %X
1. %#X
2. %#nX n > len(X)
3. %#-nX n > len(X)
4. %#.nX n > len(X)
5. %#0nX n > len(X)

** ' '
#+begin_quote
A blank should be left before a positive number (or empty string) produced by a signed conversion.
#+end_quote
*** %d
1. % d, d > 0
2. % d, d = 0
3. % d, d < 0
*** %i
1. % i, i > 0
2. % i, i = 0
3. % i, i < 0

** +
#+begin_quote
A sign should always be placed before a number porduced by a signed conversion. *+ overrides space*
#+end_quote
*** %d
1. %+d, d < 0
2. %+d, d = 0
3. %+d, d > 0
4. % +d, d > 0
5. %+ d, d > 0
*** %i
1. %+i, i < 0
2. %+i, i = 0
3. %+i, i > 0
4. % +i, i > 0
5. %+ i, i > 0
